{"version":3,"sources":["App-test.tsx"],"names":["Example","React","useState","name","setUser","show","setShow","setTimeout","Math","floor","random","test","getByTestId","getByText","queryByTestId","toJSON","famousWomanInHistory","input","fireEvent","changeText","button","press","expect","toBeTruthy","props","children","toBe","toMatchSnapshot"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,OAAT,GAAmB;AAAA,wBACOC,kBAAMC,QAAN,CAAe,EAAf,CADP;AAAA;AAAA,MACVC,IADU;AAAA,MACJC,OADI;;AAAA,yBAEOH,kBAAMC,QAAN,CAAe,KAAf,CAFP;AAAA;AAAA,MAEVG,IAFU;AAAA,MAEJC,OAFI;;AAIjB,sBACE,gCAAC,iBAAD,qBACE,gCAAC,sBAAD;AAAW,IAAA,KAAK,EAAEH,IAAlB;AAAwB,IAAA,YAAY,EAAEC,OAAtC;AAA+C,IAAA,MAAM,EAAC;AAAtD,IADF,eAEE,gCAAC,mBAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,OAAO,EAAE,mBAAM;AACb;AACA;AACAG,MAAAA,UAAU,CAAC,YAAM;AACfD,QAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,OAFS,EAEPG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAFO,CAAV;AAGD;AARH,IAFF,EAYGL,IAAI,iBAAI,gCAAC,iBAAD;AAAM,IAAA,MAAM,EAAC;AAAb,KAAiCF,IAAjC,CAZX,CADF;AAgBD;;AAEDQ,IAAI,CAAC,yBAAD,uEAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAC0B,wCAAO,gCAAC,OAAD,OAAP,CAD1B,EACvBC,WADuB,WACvBA,WADuB,EACVC,SADU,WACVA,SADU,EACCC,aADD,WACCA,aADD,EACgBC,MADhB,WACgBA,MADhB;AAExBC,UAAAA,oBAFwB,GAED,cAFC;AAIxBC,UAAAA,KAJwB,GAIhBL,WAAW,CAAC,OAAD,CAJK;;AAK9BM,kCAAUC,UAAV,CAAqBF,KAArB,EAA4BD,oBAA5B;;AAEMI,UAAAA,MAPwB,GAOfP,SAAS,CAAC,gBAAD,CAPM;;AAQ9BK,kCAAUG,KAAV,CAAgBD,MAAhB;;AAR8B;AAAA,iBAUxB,2BAAQ;AAAA,mBAAME,MAAM,CAACR,aAAa,CAAC,kBAAD,CAAd,CAAN,CAA0CS,UAA1C,EAAN;AAAA,WAAR,CAVwB;;AAAA;AAY9BD,UAAAA,MAAM,CAACV,WAAW,CAAC,kBAAD,CAAX,CAAgCY,KAAhC,CAAsCC,QAAvC,CAAN,CAAuDC,IAAvD,CACEV,oBADF;AAGAM,UAAAA,MAAM,CAACP,MAAM,EAAP,CAAN,CAAiBY,eAAjB;;AAf8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B,GAAJ","sourcesContent":["import React from 'react';\nimport {Button, Text, TextInput, View} from 'react-native';\nimport {fireEvent, render, waitFor} from '@testing-library/react-native';\n\nfunction Example() {\n  const [name, setUser] = React.useState('');\n  const [show, setShow] = React.useState(false);\n\n  return (\n    <View>\n      <TextInput value={name} onChangeText={setUser} testID=\"input\" />\n      <Button\n        title=\"Print Username\"\n        onPress={() => {\n          // let's pretend this is making a server request, so it's async\n          // (you'd want to mock this imaginary request in your unit tests)...\n          setTimeout(() => {\n            setShow(!show);\n          }, Math.floor(Math.random() * 200));\n        }}\n      />\n      {show && <Text testID=\"printed-username\">{name}</Text>}\n    </View>\n  );\n}\n\ntest('examples of some things', async () => {\n  const {getByTestId, getByText, queryByTestId, toJSON} = render(<Example />);\n  const famousWomanInHistory = 'Ada Lovelace';\n\n  const input = getByTestId('input');\n  fireEvent.changeText(input, famousWomanInHistory);\n\n  const button = getByText('Print Username');\n  fireEvent.press(button);\n\n  await waitFor(() => expect(queryByTestId('printed-username')).toBeTruthy());\n\n  expect(getByTestId('printed-username').props.children).toBe(\n    famousWomanInHistory,\n  );\n  expect(toJSON()).toMatchSnapshot();\n});\n"]}