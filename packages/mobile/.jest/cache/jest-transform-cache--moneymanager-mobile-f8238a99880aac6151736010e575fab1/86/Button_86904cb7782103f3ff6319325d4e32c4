16b76aafa44bd84b23d0ee21db2c095d










'use strict';var _jsxFileName = "/home/vinibispodev/Documents/Business/moneymanager/node_modules/react-native/Libraries/Components/Button.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}var























































































































Button = function (_React$Component) {require("@babel/runtime/helpers/inherits")(Button, _React$Component);var _super = _createSuper(Button);function Button() {require("@babel/runtime/helpers/classCallCheck")(this, Button);return _super.apply(this, arguments);}require("@babel/runtime/helpers/createClass")(Button, [{ key: "render", value: function render()
    {var _this$props =














      this.props,accessibilityLabel = _this$props.accessibilityLabel,color = _this$props.color,onPress = _this$props.onPress,touchSoundDisabled = _this$props.touchSoundDisabled,title = _this$props.title,hasTVPreferredFocus = _this$props.hasTVPreferredFocus,nextFocusDown = _this$props.nextFocusDown,nextFocusForward = _this$props.nextFocusForward,nextFocusLeft = _this$props.nextFocusLeft,nextFocusRight = _this$props.nextFocusRight,nextFocusUp = _this$props.nextFocusUp,disabled = _this$props.disabled,testID = _this$props.testID;
      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      if (color) {
        if (require('../Utilities/Platform').OS === 'ios') {
          textStyles.push({ color: color });
        } else {
          buttonStyles.push({ backgroundColor: color });
        }
      }
      var accessibilityState = {};
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
        accessibilityState.disabled = true;
      }
      require('invariant')(
      typeof title === 'string',
      'The title prop of a Button must be a string');

      var formattedTitle =
      require('../Utilities/Platform').OS === 'android' ? title.toUpperCase() : title;
      var Touchable =
      require('../Utilities/Platform').OS === 'android' ? require('./Touchable/TouchableNativeFeedback') : require('./Touchable/TouchableOpacity');
      return (
        require('react').createElement(Touchable, {
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: "button",
          accessibilityState: accessibilityState,
          hasTVPreferredFocus: hasTVPreferredFocus,
          nextFocusDown: nextFocusDown,
          nextFocusForward: nextFocusForward,
          nextFocusLeft: nextFocusLeft,
          nextFocusRight: nextFocusRight,
          nextFocusUp: nextFocusUp,
          testID: testID,
          disabled: disabled,
          onPress: onPress,
          touchSoundDisabled: touchSoundDisabled, __self: this, __source: { fileName: _jsxFileName, lineNumber: 172, columnNumber: 7 } },
        require('react').createElement(require('./View/View'), { style: buttonStyles, __self: this, __source: { fileName: _jsxFileName, lineNumber: 186, columnNumber: 9 } },
        require('react').createElement(require('../Text/Text'), { style: textStyles, disabled: disabled, __self: this, __source: { fileName: _jsxFileName, lineNumber: 187, columnNumber: 11 } },
        formattedTitle))));




    } }]);return Button;}(require('react').Component);


var styles = require('../StyleSheet/StyleSheet').create({
  button: require('../Utilities/Platform').select({
    ios: {},
    android: {
      elevation: 4,

      backgroundColor: '#2196F3',
      borderRadius: 2 } }),


  text: _objectSpread({
    textAlign: 'center',
    margin: 8 },
  require('../Utilities/Platform').select({
    ios: {

      color: '#007AFF',
      fontSize: 18 },

    android: {
      color: 'white',
      fontWeight: '500' } })),



  buttonDisabled: require('../Utilities/Platform').select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf' } }),


  textDisabled: require('../Utilities/Platform').select({
    ios: {
      color: '#cdcdcd' },

    android: {
      color: '#a1a1a1' } }) });




module.exports = Button;