d06599bc7d2ae1c893cff1e49e6947e4










'use strict';








var _NativeStatusBarManagerAndroid = _interopRequireDefault(require("./NativeStatusBarManagerAndroid"));
var _NativeStatusBarManagerIOS = _interopRequireDefault(require("./NativeStatusBarManagerIOS"));var _NativeStatusBarManag;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}




























































































function mergePropsStack(
propsStack,
defaultValues)
{
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, _extends({}, defaultValues));
}





function createStackEntry(props) {
  return {
    backgroundColor:
    props.backgroundColor != null ?
    {
      value: props.backgroundColor,
      animated: props.animated } :

    null,
    barStyle:
    props.barStyle != null ?
    {
      value: props.barStyle,
      animated: props.animated } :

    null,
    translucent: props.translucent,
    hidden:
    props.hidden != null ?
    {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition } :

    null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible };

}var































































StatusBar = function (_React$Component) {_inherits(StatusBar, _React$Component);var _super = _createSuper(StatusBar);function StatusBar() {var _this;_classCallCheck(this, StatusBar);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.














































































































































































    _stackEntry = null;return _this;}_createClass(StatusBar, [{ key: "componentDidMount", value: function componentDidMount()

    {




      this._stackEntry = StatusBar.pushStackEntry(this.props);
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {


      StatusBar.popStackEntry(this._stackEntry);
    } }, { key: "componentDidUpdate", value: function componentDidUpdate()

    {
      this._stackEntry = StatusBar.replaceStackEntry(
      this._stackEntry,
      this.props);

    } }, { key: "render", value: function render()












































































    {
      return null;
    } }], [{ key: "setHidden", value: function setHidden(hidden, animation) {animation = animation || 'none';StatusBar._defaultProps.hidden.value = hidden;if (require('../../Utilities/Platform').OS === 'ios') {_NativeStatusBarManagerIOS.default.setHidden(hidden, animation);} else if (require('../../Utilities/Platform').OS === 'android') {_NativeStatusBarManagerAndroid.default.setHidden(hidden);}} }, { key: "setBarStyle", value: function setBarStyle(style, animated) {animated = animated || false;StatusBar._defaultProps.barStyle.value = style;if (require('../../Utilities/Platform').OS === 'ios') {_NativeStatusBarManagerIOS.default.setStyle(style, animated);} else if (require('../../Utilities/Platform').OS === 'android') {_NativeStatusBarManagerAndroid.default.setStyle(style);}} }, { key: "setNetworkActivityIndicatorVisible", value: function setNetworkActivityIndicatorVisible(visible) {if (require('../../Utilities/Platform').OS !== 'ios') {console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');return;}StatusBar._defaultProps.networkActivityIndicatorVisible = visible;_NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);} }, { key: "setBackgroundColor", value: function setBackgroundColor(color, animated) {if (require('../../Utilities/Platform').OS !== 'android') {console.warn('`setBackgroundColor` is only available on Android');return;}animated = animated || false;StatusBar._defaultProps.backgroundColor.value = color;var processedColor = require('../../StyleSheet/processColor')(color);if (processedColor == null) {console.warn("`StatusBar.setBackgroundColor`: Color " + color + " parsed to null or undefined");return;}require('invariant')(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');_NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);} }, { key: "setTranslucent", value: function setTranslucent(translucent) {if (require('../../Utilities/Platform').OS !== 'android') {console.warn('`setTranslucent` is only available on Android');return;}StatusBar._defaultProps.translucent = translucent;_NativeStatusBarManagerAndroid.default.setTranslucent(translucent);} }, { key: "pushStackEntry", value: function pushStackEntry(props) {var entry = createStackEntry(props);StatusBar._propsStack.push(entry);StatusBar._updatePropsStack();return entry;} }, { key: "popStackEntry", value: function popStackEntry(entry) {var index = StatusBar._propsStack.indexOf(entry);if (index !== -1) {StatusBar._propsStack.splice(index, 1);}StatusBar._updatePropsStack();} }, { key: "replaceStackEntry", value: function replaceStackEntry(entry, props) {var newEntry = createStackEntry(props);var index = StatusBar._propsStack.indexOf(entry);if (index !== -1) {StatusBar._propsStack[index] = newEntry;}StatusBar._updatePropsStack();return newEntry;} }]);return StatusBar;}(require('react').Component);StatusBar._propsStack = [];StatusBar._defaultProps = createStackEntry({ animated: false, showHideTransition: 'fade', backgroundColor: require('../../Utilities/Platform').OS === 'android' ? (_NativeStatusBarManag = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black', barStyle: 'default', translucent: false, hidden: false, networkActivityIndicatorVisible: false });StatusBar._updateImmediate = null;StatusBar._currentValues = null;StatusBar.currentHeight = require('../../Utilities/Platform').OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;StatusBar.defaultProps = { animated: false, showHideTransition: 'fade' };StatusBar._updatePropsStack = function () {clearImmediate(StatusBar._updateImmediate);StatusBar._updateImmediate = setImmediate(function () {var oldProps = StatusBar._currentValues;var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);if (require('../../Utilities/Platform').OS === 'ios') {if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {_NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);}if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {_NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');}if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {_NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);}} else if (require('../../Utilities/Platform').OS === 'android') {_NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);var processedColor = require('../../StyleSheet/processColor')(mergedProps.backgroundColor.value);if (processedColor == null) {console.warn("`StatusBar._updatePropsStack`: Color " + mergedProps.backgroundColor.value + " parsed to null or undefined");} else {require('invariant')(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');_NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);}if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {_NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);}if (!oldProps || oldProps.translucent !== mergedProps.translucent) {_NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);}}StatusBar._currentValues = mergedProps;});};


module.exports = StatusBar;