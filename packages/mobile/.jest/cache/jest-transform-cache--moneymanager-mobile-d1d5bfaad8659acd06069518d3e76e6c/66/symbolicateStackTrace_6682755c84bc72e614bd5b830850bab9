44a38d132f0c635c54e68412502663ea










'use strict';



var _NativeSourceCode = _interopRequireDefault(require("../../NativeModules/specs/NativeSourceCode"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var fetch;


















function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(
stack) {var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:












          if (!fetch) {
            fetch = global.fetch || require('../../Network/fetch').fetch;
          }

          devServer = require('./getDevServer')();if (
          devServer.bundleLoadedFromServer) {_context.next = 4;break;}throw (
            new Error('Bundle was not loaded from the packager'));case 4:


          stackCopy = stack;_NativeSourceCode$get =

          _NativeSourceCode.default.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;
          if (scriptURL) {
            foundInternalSource = false;
            stackCopy = stack.map(function (frame) {
              if (frame.file == null) {
                return frame;
              }





              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {

                return _objectSpread(_objectSpread({}, frame), {}, { file: scriptURL });
              }

              foundInternalSource = true;
              return frame;
            });
          }_context.next = 9;return regeneratorRuntime.awrap(

          fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({ stack: stackCopy }) }));case 9:response = _context.sent;_context.next = 12;return regeneratorRuntime.awrap(

          response.json());case 12:return _context.abrupt("return", _context.sent);case 13:case "end":return _context.stop();}}}, null, null, null, Promise);}


module.exports = symbolicateStackTrace;